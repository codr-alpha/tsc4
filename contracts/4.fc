{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int shif(int x, int y) inline {
    if((x >= 97) & (x <= 122)) {
        return (x - 97 + y) % 26 + 97;
    } 
    if((x >= 65) & (x <= 90)) {
        return (x - 65 + y) % 26 + 65;
    }
    return x;
}


(cell) SHIFT(int shift, slice ds) {
    builder bld = begin_cell();
    
    if (ds.slice_refs() > 0) {
        bld = store_ref(bld, SHIFT(shift, ds~load_ref().begin_parse()));
    }

    while(~ ds.slice_empty?()){
        int x = ds~load_uint(8);
        int w = shif(x, shift);
        bld~store_uint(w, 8);
    }


    return bld.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return SHIFT(shift, text.begin_parse());
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift = 26 - shift;
    return SHIFT(shift, text.begin_parse());
}
