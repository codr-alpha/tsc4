{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) SHIFT(int shift, cell text){
    slice ds = text.begin_parse();
    int flag = ds~load_int(32);
    tuple tp = empty_tuple();
    int n = 0;
    while(~ ds.slice_empty?()){
        int x = ds~load_int(8);
        x = x - 96;
        tp~tpush(96 + ((x + shift) % 26));
        n = n + 1;
    }
    int i = 0;
    builder x = begin_cell();
    x~store_int(flag, 32);
    repeat(n){
        x~store_int(tp.at(i), 8);
        i = i + 1;
    }

    repeat (ds.slice_refs()) {
        x.store_ref(SHIFT(shift, ds~load_ref()));
    }

    return x.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    shift = shift % 26;
    return SHIFT(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift = shift % 26;
    shift = 26 - shift;
    shift = shift % 26;
    return SHIFT(shift, text);
}
