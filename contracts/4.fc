{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII;
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    slice ds = text.begin_parse();
    int flag = ds~load_uint(32);
    tuple tp = empty_tuple();
    int n = 0;
    while(~ ds.slice_empty?()){
        int x = ds~load_uint(8);
        tp~tpush(x);
        n = n + 1;
    }
    if(n <= 1){ return text;}
    shift = shift % n;
    int i = shift;
    tuple TP = empty_tuple();
    repeat(n){
        if(i == n){ i = 0; }
        TP~tpush(tp.at(i));
        i = i + 1;
    }
    i = 0;
    builder x = begin_cell();
    x~store_uint(flag, 32);
    repeat(n){
        x~store_uint(TP.at(i), 8);
        i = i + 1;
    }
    return x.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    slice ds = text.begin_parse();
    int flag = ds~load_uint(32);
    tuple tp = empty_tuple();
    int n = 0;
    while(~ ds.slice_empty?()){
        int x = ds~load_uint(8);
        tp~tpush(x);
        n = n + 1;
    }
    if(n <= 1){ return text;}
    shift = shift % n;
    int i = n - shift;
    tuple TP = empty_tuple();
    repeat(n){
        if(i == n){ i = 0; }
        TP~tpush(tp.at(i));
        i = i + 1;
    }
    i = 0;
    builder x = begin_cell();
    x~store_uint(flag, 32);
    repeat(n){
        x~store_uint(TP.at(i), 8);
        i = i + 1;
    }
    return x.end_cell();
}
