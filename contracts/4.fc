{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int shif(int x, int y) {
    if((65 <= x) & (x <= 90)) {
        return ((x - 65 + y) % 26) + 65;
    }
    if((97 <= x) & (x <= 122)) {
        return ((x - 97 + y) % 26) + 97;
    }
    return x;
}


(cell) SHIFT(int shift, cell text){
    slice ds = text.begin_parse();
    int flag = ds~load_int(32);
    builder bld = begin_cell();
    bld~store_int(flag, 32);
    while(~ ds.slice_empty?()){
        int x = ds~load_uint(8);
        int w = shif(x, shift);
        bld~store_int(w, 8);
    }

    repeat (ds.slice_refs()) {
        cell XX = SHIFT(shift, ds~load_ref());
        bld = store_ref(bld, XX);
    }


    return bld.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    shift = shift % 26;
    return SHIFT(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    shift = shift % 26;
    shift = 26 - shift;
    shift = shift % 26;
    return SHIFT(shift, text);
}
