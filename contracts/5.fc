{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int, int) z(int a1, int a2, int a3, int b1, int b2, int b3){
    int rt1 = a1 * b1 + a2 * b2;
    int rt2 = a1 * b2 + a2 * b3;
    int rt3 = a2 * b2 + a3 * b3;
    return (rt1, rt2, rt3);
}

(int, int, int) pw(int a1, int a2, int a3, int x){
    int rt1 = 1;
    int rt2 = 0;
    int rt3 = 1;
    while(x > 0){
        if((x & 1) > 0){
            (rt1, rt2, rt3) = z(rt1, rt2, rt3, a1, a2, a3);
        }
        (a1, a2, a3) = z(a1, a2, a3, a1, a2, a3);
    }
    return (rt1, rt2, rt3);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    tuple result = empty_tuple();
    if(k == 0){ return result; }
    int Fm;
    int F_0;
    int F_1;
    if(n > 1){
        Fm = 0;
        F_0 = 1;
        F_1 = 1;
        (F_1, F_0, F_m) = pw(F_1, F_0, F_m, n - 1);
    } else{
        if(n == 0){
            F_1 = 0;
        } else{
            F_0 = 0;
            F_1 = 1;
        }
    }
    int i = n;
    while(i < (n + k)){
        if(i != n){
            if(F_1 == 0){
                F_1 = 1;
                F_0 = 0;
            } else{
                int x = 0;
                if(i < (n + k - 2)){
                    x = F_0 + F_1;
                }
                F_0 = F_1;
                F_1 = x;
                i = i + 1;
            }
        }
        result~tpush(F_0);
    }
    return result;
}
