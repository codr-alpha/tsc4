{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int) fib(int n) inline {
    int f0 = 1;
    int f1 = 0;
    repeat(n){
        int x = f0 + f1;
        f0 = f1;
        f1 = x;
    }
    return (f0, f1);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    tuple result = empty_tuple();
    tuple z = empty_tuple();
    int sz = 0;
    if(k == 0){
        return result;
    }
    int F_0 = 0;
    int F_1 = 0;
    
    (F_0, F_1) = fib(n);
    int i = n + 1;
    result~tpush(F_1);
    while(i < (n + k)){
        int x = F_0 + F_1;
        F_0 = F_1;
        F_1 = x;
        z~tpush(F_1);
        sz = sz + 1;
        if(sz == 30){
            sz = 0;
            result~tpush(z);
            z = empty_tuple();
        }
        i = i + 1;
    }
    return result;
}
