{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) F (int F_0, int F_1, int k){
    tuple rt = empty_tuple();
    int i = 0;
    repeat(k){
        i = i + 1;
        rt~tpush(F_1);
        if(i != k){
            int x = F_0 + F_1;
            F_0 = F_1;
            F_1 = x;
        }
    }
    return rt;
}

(int) fib(int i){
    if(i == -2){
        return -1;
    }
    if(i == -1){
        return 1;
    }
    return (fib(i - 1) + fib(i - 2));
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    int Fm = 0;
    int F_0 = 0;
    int F_1 = 0;
    {-
    if(n > 0){
        Fm = 0;
        F_0 = 1;
        F_1 = 1;
        int x = n - 2;
        int a1 = F_1;
        int a2 = F_0;
        int a3 = Fm;
        while(x > 0){
            if((x & 1) > 0){
                int A1 = F_1;
                int A2 = F_0;
                int A3 = Fm;
                int B1 = a1;
                int B2 = a2;
                int B3 = a3;
                F_1 = A1 * B1 + A2 * B2;
                F_0 = A1 * B2 + A2 * B3;
                Fm = A2 * B2 + A3 * B3;
            }
            int A1 = a1;
            int A2 = a2;
            int A3 = a3;
            int B1 = a1;
            int B2 = a2;
            int B3 = a3;
            a1 = A1 * B1 + A2 * B2;
            a2 = A1 * B2 + A2 * B3;
            a3 = A2 * B2 + A3 * B3;
            x = (x >> 1);
        }
    } else {
        F_0 = 1;
        F_1 = 0;
    }
  -}
    F_1 = fib(n);
    F_0 = fib(n - 1);
    return F(F_0, F_1, k);
}
